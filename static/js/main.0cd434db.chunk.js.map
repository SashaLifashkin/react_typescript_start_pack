{"version":3,"sources":["ApiQuery.ts","CloseContext.tsx","components/Languages/Languages.tsx","components/Countries/Countries.tsx","App.tsx","index.tsx"],"names":["client","ApolloClient","uri","cache","InMemoryCache","API_DATA","gql","CloseContext","React","createContext","visible","setVisible","handleClick","Languages","props","languages","useContext","className","map","language","type","onClick","length","code","name","Countries","countries","country","isOpen","includes","App","useQuery","loading","error","data","useState","word","current","filter","item","contextValue","Provider","value","continents","continent","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"uUAMaA,EAAS,IAAIC,IAAa,CACrCC,IAAK,sCACLC,MAAO,IAAIC,MAGAC,EAAWC,YAAH,yL,wBCTRC,EAAeC,IAAMC,cAAuB,CACvDC,QAAS,GACTC,WAAY,aACZC,YAAa,e,eCGFC,EAA6B,SAACC,GACzC,IAAQC,EAAcD,EAAdC,UACAJ,EAAeK,qBAAWT,GAA1BI,WAER,OACE,oBAAIM,UAAU,4BAAd,SACGF,EAAUG,KAAI,SAACC,GAAD,OACb,oBAEEF,UAAU,kBAFZ,SAIE,wBACEG,KAAK,SACLH,UAAU,oBACVI,QAAS,WACHN,EAAUA,EAAUO,OAAS,GAAGC,OAASJ,EAASI,MACpDZ,EAAW,KALjB,SASGQ,EAASK,QAZPL,EAASI,YCPXE,G,MAA6B,SAACX,GACzC,IAAQY,EAAcZ,EAAdY,UAER,EAAiCV,qBAAWT,GAApCG,EAAR,EAAQA,QAASE,EAAjB,EAAiBA,YAEjB,OACE,oBAAIK,UAAU,4BAAd,SACGS,EAAUR,KAAI,SAACS,GACd,IAAMC,EAASlB,EAAQmB,SAASF,EAAQH,MAExC,OACE,qBAEEP,UAAU,kBAFZ,UAIE,wBACEG,KAAK,SACLH,UAAU,oBACVI,QAAS,kBAAMT,EAAYe,EAAQH,OAHrC,SAKGG,EAAQH,OAEVI,GAAU,cAAC,EAAD,CAAWb,UAAWY,EAAQZ,cAVpCY,EAAQJ,aCdZO,G,MAAgB,WAC3B,MAAiCC,YAAS1B,GAAlC2B,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,MAAOC,EAAxB,EAAwBA,KACxB,EAA8BC,mBAAmB,IAAjD,mBAAOzB,EAAP,KAAgBC,EAAhB,KAEA,GAAIqB,EACF,OAAO,2CAGT,GAAIC,EACF,OAAO,yCAGT,IAAMrB,EAAc,SAACwB,GACf1B,EAAQmB,SAASO,GACnBzB,GAAW,SAAA0B,GAAO,OAAIA,EAAQC,QAAO,SAAAC,GAAI,OAAIA,IAASH,QAEtDzB,GAAW,SAAA0B,GAAO,4BAAQA,GAAR,CAAiBD,QAIjCI,EAAwB,CAC5B9B,UACAC,aACAC,eAGF,OACE,cAACL,EAAakC,SAAd,CAAuBC,MAAOF,EAA9B,SACE,sBAAKvB,UAAU,MAAf,UACE,oBAAIA,UAAU,aAAd,mDAGA,oBAAIA,UAAU,YAAd,SACGiB,EAAKS,WAAWzB,KAAI,SAAC0B,GACpB,IAAMhB,EAASlB,EAAQmB,SAASe,EAAUpB,MAE1C,OACE,qBAEEP,UAAU,YAFZ,UAIE,wBACEG,KAAK,SACLH,UAAU,cACVI,QAAS,kBAAMT,EAAYgC,EAAUpB,OAHvC,SAKGoB,EAAUpB,OAEZI,GACC,cAAC,EAAD,CACEF,UAAWkB,EAAUlB,cAZpBkB,EAAUrB,kBCtC/BsB,IAASC,OACP,cAACC,EAAA,EAAD,CAAgB/C,OAAQA,EAAxB,SACE,cAAC,EAAD,MAEFgD,SAASC,eAAe,W","file":"static/js/main.0cd434db.chunk.js","sourcesContent":["import {\n  ApolloClient,\n  InMemoryCache,\n  gql,\n} from '@apollo/client';\n\nexport const client = new ApolloClient({\n  uri: 'https://countries.trevorblades.com/',\n  cache: new InMemoryCache(),\n});\n\nexport const API_DATA = gql`\n{\n  continents {\n    code,\n    name,\n    countries {\n      code,\n      name,\n      languages {\n        code,\n        name,\n      }\n    }\n  }\n}\n`;\n","import React from 'react';\n\nexport const CloseContext = React.createContext<Context>({\n  visible: [],\n  setVisible: () => {},\n  handleClick: () => {},\n});\n","import React, { useContext } from 'react';\nimport { CloseContext } from '../../CloseContext';\nimport './Languages.scss';\n\ntype Props = {\n  languages: Language[];\n};\n\nexport const Languages: React.FC<Props> = (props) => {\n  const { languages } = props;\n  const { setVisible } = useContext(CloseContext);\n\n  return (\n    <ul className=\"Languages Languages__list\">\n      {languages.map((language: Language) => (\n        <li\n          key={language.code}\n          className=\"Languages__item\"\n        >\n          <button\n            type=\"button\"\n            className=\"Languages__button\"\n            onClick={() => {\n              if (languages[languages.length - 1].code === language.code) {\n                setVisible([]);\n              }\n            }}\n          >\n            {language.name}\n          </button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n","import React, { useContext } from 'react';\nimport { Languages } from '../Languages/Languages';\nimport { CloseContext } from '../../CloseContext';\nimport './Countries.scss';\n\ntype Props = {\n  countries: Country[];\n};\n\nexport const Countries: React.FC<Props> = (props) => {\n  const { countries } = props;\n\n  const { visible, handleClick } = useContext(CloseContext);\n\n  return (\n    <ul className=\"Countries Countries__list\">\n      {countries.map((country: Country) => {\n        const isOpen = visible.includes(country.name);\n\n        return (\n          <li\n            key={country.code}\n            className=\"Countries__item\"\n          >\n            <button\n              type=\"button\"\n              className=\"Countries__button\"\n              onClick={() => handleClick(country.name)}\n            >\n              {country.name}\n            </button>\n            {isOpen && <Languages languages={country.languages} />}\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n","import React, { useState } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { API_DATA } from './ApiQuery';\nimport { Countries } from './components/Countries/Countries';\nimport './App.scss';\nimport { CloseContext } from './CloseContext';\n\nexport const App: React.FC = () => {\n  const { loading, error, data } = useQuery(API_DATA);\n  const [visible, setVisible] = useState<string[]>([]);\n\n  if (loading) {\n    return <p>Loading...</p>;\n  }\n\n  if (error) {\n    return <p>Error :(</p>;\n  }\n\n  const handleClick = (word: string) => {\n    if (visible.includes(word)) {\n      setVisible(current => current.filter(item => item !== word));\n    } else {\n      setVisible(current => [...current, word]);\n    }\n  };\n\n  const contextValue: Context = {\n    visible,\n    setVisible,\n    handleClick,\n  };\n\n  return (\n    <CloseContext.Provider value={contextValue}>\n      <div className=\"App\">\n        <h1 className=\"App__title\">\n          Continents and Countries of the world\n        </h1>\n        <ul className=\"App__list\">\n          {data.continents.map((continent: Continent) => {\n            const isOpen = visible.includes(continent.name);\n\n            return (\n              <li\n                key={continent.code}\n                className=\"App__item\"\n              >\n                <button\n                  type=\"button\"\n                  className=\"App__button\"\n                  onClick={() => handleClick(continent.name)}\n                >\n                  {continent.name}\n                </button>\n                {isOpen && (\n                  <Countries\n                    countries={continent.countries}\n                  />\n                )}\n              </li>\n            );\n          })}\n        </ul>\n      </div>\n    </CloseContext.Provider>\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport { ApolloProvider } from '@apollo/client';\nimport { client } from './ApiQuery';\nimport { App } from './App';\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}